// Code generated by MockGen. DO NOT EDIT.
// Source: projects.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	schema "github.com/amazeeio/lagoon-client-go/schema"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProjects is a mock of Projects interface
type MockProjects struct {
	ctrl     *gomock.Controller
	recorder *MockProjectsMockRecorder
}

// MockProjectsMockRecorder is the mock recorder for MockProjects
type MockProjectsMockRecorder struct {
	mock *MockProjects
}

// NewMockProjects creates a new mock instance
func NewMockProjects(ctrl *gomock.Controller) *MockProjects {
	mock := &MockProjects{ctrl: ctrl}
	mock.recorder = &MockProjectsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjects) EXPECT() *MockProjectsMockRecorder {
	return m.recorder
}

// MinimalProjectByName mocks base method
func (m *MockProjects) MinimalProjectByName(ctx context.Context, name string, project *schema.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinimalProjectByName", ctx, name, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// MinimalProjectByName indicates an expected call of MinimalProjectByName
func (mr *MockProjectsMockRecorder) MinimalProjectByName(ctx, name, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinimalProjectByName", reflect.TypeOf((*MockProjects)(nil).MinimalProjectByName), ctx, name, project)
}

// ProjectsByMetadata mocks base method
func (m *MockProjects) ProjectsByMetadata(ctx context.Context, key, value string, project *[]schema.ProjectMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectsByMetadata", ctx, key, value, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectsByMetadata indicates an expected call of ProjectsByMetadata
func (mr *MockProjectsMockRecorder) ProjectsByMetadata(ctx, key, value, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectsByMetadata", reflect.TypeOf((*MockProjects)(nil).ProjectsByMetadata), ctx, key, value, project)
}

// UpdateProjectMetadata mocks base method
func (m *MockProjects) UpdateProjectMetadata(ctx context.Context, id int, key, value string, project *schema.ProjectMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectMetadata", ctx, id, key, value, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjectMetadata indicates an expected call of UpdateProjectMetadata
func (mr *MockProjectsMockRecorder) UpdateProjectMetadata(ctx, id, key, value, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectMetadata", reflect.TypeOf((*MockProjects)(nil).UpdateProjectMetadata), ctx, id, key, value, project)
}

// RemoveProjectMetadataByKey mocks base method
func (m *MockProjects) RemoveProjectMetadataByKey(ctx context.Context, id int, key string, project *schema.ProjectMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProjectMetadataByKey", ctx, id, key, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProjectMetadataByKey indicates an expected call of RemoveProjectMetadataByKey
func (mr *MockProjectsMockRecorder) RemoveProjectMetadataByKey(ctx, id, key, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProjectMetadataByKey", reflect.TypeOf((*MockProjects)(nil).RemoveProjectMetadataByKey), ctx, id, key, project)
}
