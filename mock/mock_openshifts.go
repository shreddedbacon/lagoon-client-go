// Code generated by MockGen. DO NOT EDIT.
// Source: openshifts.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	schema "github.com/amazeeio/lagoon-client-go/schema"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOpenshifts is a mock of Openshifts interface
type MockOpenshifts struct {
	ctrl     *gomock.Controller
	recorder *MockOpenshiftsMockRecorder
}

// MockOpenshiftsMockRecorder is the mock recorder for MockOpenshifts
type MockOpenshiftsMockRecorder struct {
	mock *MockOpenshifts
}

// NewMockOpenshifts creates a new mock instance
func NewMockOpenshifts(ctrl *gomock.Controller) *MockOpenshifts {
	mock := &MockOpenshifts{ctrl: ctrl}
	mock.recorder = &MockOpenshiftsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenshifts) EXPECT() *MockOpenshiftsMockRecorder {
	return m.recorder
}

// AllOpenshifts mocks base method
func (m *MockOpenshifts) AllOpenshifts(ctx context.Context, result *[]schema.Openshift) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllOpenshifts", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllOpenshifts indicates an expected call of AllOpenshifts
func (mr *MockOpenshiftsMockRecorder) AllOpenshifts(ctx, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllOpenshifts", reflect.TypeOf((*MockOpenshifts)(nil).AllOpenshifts), ctx, result)
}

// AddOpenshift mocks base method
func (m *MockOpenshifts) AddOpenshift(ctx context.Context, openshift *schema.AddOpenshiftInput, result *schema.Openshift) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOpenshift", ctx, openshift, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOpenshift indicates an expected call of AddOpenshift
func (mr *MockOpenshiftsMockRecorder) AddOpenshift(ctx, openshift, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOpenshift", reflect.TypeOf((*MockOpenshifts)(nil).AddOpenshift), ctx, openshift, result)
}

// UpdateOpenshift mocks base method
func (m *MockOpenshifts) UpdateOpenshift(ctx context.Context, openshift *schema.UpdateOpenshiftInput, result *schema.Openshift) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOpenshift", ctx, openshift, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOpenshift indicates an expected call of UpdateOpenshift
func (mr *MockOpenshiftsMockRecorder) UpdateOpenshift(ctx, openshift, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOpenshift", reflect.TypeOf((*MockOpenshifts)(nil).UpdateOpenshift), ctx, openshift, result)
}

// DeleteOpenshift mocks base method
func (m *MockOpenshifts) DeleteOpenshift(ctx context.Context, openshift *schema.DeleteOpenshiftInput, result *schema.DeleteOpenshift) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOpenshift", ctx, openshift, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOpenshift indicates an expected call of DeleteOpenshift
func (mr *MockOpenshiftsMockRecorder) DeleteOpenshift(ctx, openshift, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOpenshift", reflect.TypeOf((*MockOpenshifts)(nil).DeleteOpenshift), ctx, openshift, result)
}
